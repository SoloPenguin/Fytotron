#include "DHT.h"
#include <DS3231.h>
#include <LiquidCrystal.h>


#define DHTPIN 53
#define DHTTYPE DHT11

DHT dht(DHTPIN, DHTTYPE);

// select the pins used on the LCD panel
LiquidCrystal lcd(8, 9, 4, 5, 6, 7);

// define some values used by the panel and buttons
int lcd_key     = 0;
int adc_key_in  = 0;
#define btnRIGHT  0
#define btnUP     1
#define btnDOWN   2
#define btnLEFT   3
#define btnSELECT 4
#define btnNONE   5

// read the buttons
int read_LCD_buttons()
{
 adc_key_in = analogRead(0);      // read the value from the sensor 
 if (adc_key_in > 1000) return btnNONE; // We make this the 1st option for speed reasons since it will be the most likely result
 if (adc_key_in < 50)   return btnRIGHT;  
 if (adc_key_in < 250)  return btnUP; 
 if (adc_key_in < 450)  return btnDOWN; 
 if (adc_key_in < 650)  return btnLEFT; 
 if (adc_key_in < 850)  return btnSELECT;  

 return btnNONE;  // when all others fail, return this...
}

// Init the DS3231 using the hardware interface
DS3231  rtc(SDA, SCL);

int relayPin1 = 23; //modrÃ¡
int relayPin2 = 25; //bila
int relayPin3 = 27; //cervena
int setstate[] = {2,2,2};
int autostate[] = {1,1,1};
int state[] = {1,1,1};

Time  t;

bool pos = true;




void setup()
{
  pinMode(relayPin1, OUTPUT); 
  pinMode(relayPin2, OUTPUT);
  pinMode(relayPin3, OUTPUT);
  
  // Setup Serial connection
  Serial.begin(9600);

  lcd.begin(16, 2);  
  rtc.begin();                                           
  dht.begin();  
}
void loop()
{
  t = rtc.getTime();
  int timer= (t.hour);               
  Serial.print(timer);
  
  lcd_key = read_LCD_buttons();  

    if(lcd_key == btnSELECT){
      pos = !pos;
      lcd.clear();
      delay(200);
    }
    if(lcd_key == btnLEFT){
      setstate[0]++;
      if(setstate[0]>2){
        setstate[0]=0;
      }
      delay(200);
    }
    if(lcd_key == btnUP){
      setstate[1]++;
      if(setstate[1]>2){
        setstate[1]=0;
      }
      delay(200);
    }
    if(lcd_key == btnDOWN){
      setstate[2]++;
      if(setstate[2]>2){
        setstate[2]=0;
      }
      delay(200);
    }

  if(timer >= 6 && timer <= 10){
    autostate[0]=0;
    autostate[1]=0;
    autostate[2]=1;
  }

  else if(timer >= 11 && timer <= 13){
    autostate[0]=0;
    autostate[1]=0;
    autostate[2]=0;
  }
  
  else if(timer >= 14 && timer <= 18){
    autostate[0]=1;
    autostate[1]=0;
    autostate[2]=0;
  }
  
  else{
    autostate[0]=1;
    autostate[1]=1;
    autostate[2]=1;
  }
  for (int i = 0; i <3; i++){
    if(setstate[i]==2){
      state[i]=autostate[i];
    }
    else{
      state[i]=setstate[i];
    }
  }
  
  digitalWrite(relayPin1, state[0]);
  digitalWrite(relayPin2, state[1]);
  digitalWrite(relayPin3, state[2]);
  

  if(pos==true){

  // Sensor readings may also be up to 2 seconds 'old' (its a very slow sensor)
  float h = dht.readHumidity();                                           
  // Read temperature as Celsius (the default)
  float t = dht.readTemperature();  
    
  lcd.setCursor(0,0);           
  lcd.print("teplota: "); 
  lcd.setCursor(9,0);            
  lcd.print(t); // 
  lcd.setCursor(11,0);
  lcd.print("*C ");
  
  lcd.setCursor(0,1);            
  lcd.print("vlhkost: "); 
  lcd.setCursor(9,1);            
  lcd.print(h); 
  lcd.setCursor(11,1);
  lcd.print("%     ");
  
  delay(100);
  }
  if(pos==false){
    
  lcd.clear();
  lcd.setCursor(0,0);
  lcd.print("nastaveni");
  lcd.setCursor(10,0);
  lcd.print(setstate[0]);
  lcd.setCursor(12,0);
  lcd.print(setstate[1]);
  lcd.setCursor(14,0);
  lcd.print(setstate[2]);
    
  lcd.setCursor(0,1);
  lcd.print("aktualni");
  lcd.setCursor(10,1);
  lcd.print(state[0]);
  lcd.setCursor(12,1);
  lcd.print(state[1]);
  lcd.setCursor(14,1);
  lcd.print(state[2]);
  delay(300);
  }    
}
